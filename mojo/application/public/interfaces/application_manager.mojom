// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mojo.shell.mojom;

import "mojo/application/public/interfaces/shell.mojom";

struct ApplicationInfo {
  string url;
  string qualifier;
  uint32 pid;
};

// Implemented by an application that wishes to be informed when the list of
// running applications changes.
interface ApplicationManagerListener {
  // Called once when the listener is added via
  // ApplicationManager::AddListener() to provide the initial list of running
  // applications that the listener observes changes against.
  SetRunningApplications(array<ApplicationInfo> applications);

  // Tells the listener about applications starting or ending.
  ApplicationStarted(ApplicationInfo application);
  ApplicationEnded(uint32 pid);
};

interface ApplicationManager {
  // Instructs the ApplicationManager to create an instance for an existing
  // process at the other end of |channel|, and perform applicable
  // initialization. This assumes the target process will bind the other end of
  // channel to an implementation of ChildController and bind an Application
  // request there.
  CreateInstanceForHandle(handle channel,
                          string url,
                          mojo.CapabilityFilter filter);

  // Called by a child process every time it launches a process. This is needed
  // so that the ChildBroker class in the grandchild process can talk to the one
  // global BrokerState in the parent mojo_runner process.
  RegisterProcessWithBroker(uint32 pid,
                            handle pipe);

  // The listener is removed when the pipe is closed.
  AddListener(ApplicationManagerListener listener);
};
