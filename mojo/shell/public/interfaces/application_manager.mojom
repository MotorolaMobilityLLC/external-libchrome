// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mojo.shell.mojom;

import "mojo/shell/public/interfaces/shell.mojom";

struct InstanceInfo {
  uint32 id;
  string name;
  string qualifier;
  uint32 pid;
};

// Implemented by a client that wishes to be informed when the list of running
// instances changes.
interface InstanceListener {
  // Called once when the listener is added via
  // ApplicationManager::AddInstanceListener() to provide the initial list of
  // instances that the listener observes changes against.
  SetExistingInstances(array<InstanceInfo> instances);

  // Called when the application manager has started tracking an instance.
  // This happens when the application manager first handles a request to launch
  // the instance, before any process is created for it.
  InstanceCreated(InstanceInfo instance);

  // Called when the application manager has stopped tracking an instance.
  // (i.e. when it has ended/quit).
  InstanceDestroyed(uint32 id);

  // Called when a pid is available for the instance. This could be because a
  // process was created by the runner for it, or because an existing content
  // handler process was assigned.
  InstancePIDAvailable(uint32 id, uint32 pid);
};

// Implemented by an object in the application manager associated with a
// specific instance. Tells it the PID for a process launched by the client.
// This interface is only available to callers of ApplicationManager::
// CreateInstanceForHandle().
interface PIDReceiver {
  SetPID(uint32 pid);
};

interface ApplicationManager {
  // Instructs the ApplicationManager to create an instance for an existing
  // process at the other end of |channel|, and perform applicable
  // initialization. This assumes the target process will bind the other end of
  // channel to an implementation of ChildController and bind an Application
  // request there.
  CreateInstanceForHandle(handle channel,
                          string name,
                          CapabilityFilter filter,
                          PIDReceiver& pid_receiver);

  // The listener is removed when the |listener| pipe is closed.
  AddInstanceListener(InstanceListener listener);
};
