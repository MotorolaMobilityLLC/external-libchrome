// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import "sample_import.mojom"
import "sample_import2.mojom"

[JavaPackage="org.chromium.mojo.bindings.test.sample"]
module sample {

const uint8 kThree = 3;

struct Bar {
  enum Type {
    TYPE_VERTICAL = 1 << 0,
    TYPE_HORIZONTAL = (1 << 1) + 0,
    TYPE_BOTH = TYPE_VERTICAL | TYPE_HORIZONTAL,
    TYPE_INVALID
  };
  uint8 alpha = (0x100 - 1) @0;
  uint8 beta @1;
  uint8 gamma @2;
  Type type = sample.Bar.TYPE_VERTICAL @3;
};

[RequiredFields=7]
struct Foo {
  const string kFooby = "Fooby";
  string name = kFooby @8;
  int32 x @0;
  int32 y @1;
  bool a = true @2;
  bool b @3;
  bool c @4;
  Bar bar @5;
  Bar[] extra_bars @7;
  uint8[] data @6;
  handle<message_pipe> source @9;
  handle<data_pipe_consumer>[] input_streams @10;
  handle<data_pipe_producer>[] output_streams @11;
  bool[][] array_of_array_of_bools @12;
  string[][][] multi_array_of_strings @13;
};

struct DefaultsTestInner {
  int32 x = 123 @0;
};

struct DefaultsTest {
  int8 a0 = -12 @0;
  uint8 a1 = 12 @1;
  int16 a2 = 1234 @2;
  uint16 a3 = 34567 @3;
  int32 a4 = 123456 @4;
  // TODO(vtl): crbug.com/375522
  uint32 a5 /* = 3456789012 */ @5;
  // TODO(vtl): crbug.com/375522
  int64 a6 = 111111111111 @6;
  uint64 a7 /* = 9999999999999999999 */ @7;
  int32 a8 = 0x12345 @8;
  int32 a9 = -0x12345 @9;
  // TODO(vtl): crbug.com/375829
  int32 a10 /* = 010 */ @10;  // Octal.
  int32 a11 /* = -010 */ @11;  // Negative octal.
  int32 a12 = +1234 @12;
  bool a13 = true @13;
  bool a14 = false @14;
  float a15 = 123.25 @15;
  double a16 = 1234567890.123 @16;
  double a17 = 1E10 @17;
  double a18 = -1.2E+20 @18;
  double a19 = +1.23E-20 @19;

  // TODO(vtl): Add tests for default vs null when those are implemented (for
  // structs, arrays, and strings).
  sample.DefaultsTestInner a20 @20;
  uint8[] a21 @21;
  string a22 @22;
};

struct StructWithHoleV1 {
  int32 v1 = 1;
  int64 v2 = 2;
};

struct StructWithHoleV2 {
  int32 v1 = 1;
  int64 v2 = 2;
  int32 v3 = 3;
};

[Client=ServiceClient]
interface Service {
  enum BazOptions {
    BAZ_REGULAR = 0,
    BAZ_EXTRA
  };
  const uint8 kFavoriteBaz = 1;
  Frobinate@0(Foo foo @0, BazOptions baz @1, Port port @2);
};

interface ServiceClient {
  DidFrobinate@0(int32 result @0);
};

// This interface is referenced above where it is defined. It also refers to
// itself from a method.
interface Port {
  PostMessage@0(string message_text @0, Port port@1);
};

}
