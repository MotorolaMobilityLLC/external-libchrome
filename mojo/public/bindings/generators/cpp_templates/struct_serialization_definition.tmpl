{%- import "struct_macros.tmpl" as struct_macros %}
{%- set class_name = "%s::internal::%s_Data"|format(namespace, struct.name) -%}
{%- set param_name = struct.name|camel_to_underscores %}

// static
size_t ObjectTraits<{{class_name}}>::ComputeSizeOf(
    const {{class_name}}* {{param_name}}) {
  return sizeof(*{{param_name}})
{%- for pf in struct.packed.packed_fields if pf.field.kind|is_object_kind %} +
      mojo::internal::ComputeSizeOf({{param_name}}->{{pf.field.name}}())
{%- endfor %};
}

// static
{{class_name}}* ObjectTraits<{{class_name}}>::Clone(
    const {{class_name}}* {{param_name}}, Buffer* buf) {
  {{class_name}}* clone = {{class_name}}::New(buf);
  memcpy(clone, {{param_name}}, sizeof(*{{param_name}}));
{%- for pf in struct.packed.packed_fields if pf.field.kind|is_object_kind %}
  clone->set_{{pf.field.name}}(mojo::internal::Clone({#
      #}{{param_name}}->{{pf.field.name}}(), buf));
{%- endfor %}
{%- for pf in struct.packed.packed_fields if pf.field.kind|is_handle_kind %}
  mojo::internal::ResetIfNonNull({{param_name}}->{{pf.field.name}}());
{%- endfor %}
  return clone;
}

// static
void ObjectTraits<{{class_name}}>::CloseHandles(
    {{class_name}}* {{param_name}}) {
{%- for pf in struct.packed.packed_fields if pf.field.kind|is_object_kind %}
  mojo::internal::CloseHandles({{param_name}}->{{pf.field.name}}_.ptr);
{%- endfor %}
{%- if struct|is_struct_with_handles %}
  {{struct.name}}_Data_Destructor({{param_name}});
{%- endif %}
}

// static
void ObjectTraits<{{class_name}}>::EncodePointersAndHandles(
    {{class_name}}* {{param_name}}, std::vector<mojo::Handle>* handles) {
  {{ struct_macros.encodes(struct, param_name)|indent(2) }}
}

// static
bool ObjectTraits<{{class_name}}>::DecodePointersAndHandles(
    {{class_name}}* {{param_name}}, mojo::Message* message) {
  {{ struct_macros.decodes(struct, param_name)|indent(2) }}
  return true;
}
