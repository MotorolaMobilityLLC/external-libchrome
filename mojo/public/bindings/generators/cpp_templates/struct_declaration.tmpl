{%- import "struct_macros.tmpl" as struct_macros %}
{%- set class_name = struct.name ~ "_Data" -%}
class {{class_name}} {
 public:
  typedef {{struct.name}} Wrapper;

{#--- Enums #}
{%- for enum in struct.enums %}
{%    macro enum_def() %}{% include "enum_declaration.tmpl" %}{% endmacro %}
  {{enum_def()|indent(2)}}
{%- endfor %}

  static {{class_name}}* New(mojo::Buffer* buf, mojo::Buffer::Destructor dtor = NULL);

{#--- Setters -#}
{{ struct_macros.setters(struct) }}

{#--- Getters -#}
{{ struct_macros.getters(struct) }}

  size_t ComputeSize() const;
  {{class_name}}* Clone(mojo::Buffer* buf) const;
  void CloseHandles();
  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  bool DecodePointersAndHandles(mojo::Message* message);

 private:
  {{class_name}}();
  ~{{class_name}}();  // NOT IMPLEMENTED

  mojo::internal::StructHeader _header_;
{{ struct_macros.fields(struct) }}
};
MOJO_COMPILE_ASSERT(sizeof({{class_name}}) == {{struct.packed|struct_size}},
                    bad_sizeof_{{class_name}});
