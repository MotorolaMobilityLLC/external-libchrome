  function {{struct.name}}() {
{%- for packed_field in struct.packed.packed_fields %}
    this.{{packed_field.field.name}} = {{packed_field.field|default_value}};
{%- endfor %}
  }

{#--- Enums #}
{%- from "enum_definition.tmpl" import enum_def -%}
{%  for enum in struct.enums %}
{{  enum_def("%s.%s"|format(struct.name, enum.name), enum)}}
{%  endfor %}

{#--- Encoding and decoding #}
  {{struct.name}}.encodedSize = codec.kStructHeaderSize + {{struct.packed|payload_size}};

  {{struct.name}}.decode = function(decoder) {
    var packed;
    var val = new {{struct.name}}();
    var numberOfBytes = decoder.read32();
    var numberOfFields = decoder.read32();
{%- for byte in struct.bytes %}
{%-   if byte.packed_fields|length > 1 %}
    packed = decoder.read8();
{%-     for packed_field in byte.packed_fields %}
    val.{{packed_field.field.name}} = (packed >> {{packed_field.bit}}) & 1 ? true : false;
{%-     endfor %}
{%-   else %}
{%-     for packed_field in byte.packed_fields %}
    val.{{packed_field.field.name}} = decoder.{{packed_field.field.kind|decode_snippet}};
{%-     endfor %}
{%-   endif %}
{%-   if byte.is_padding %}
    decoder.skip(1);
{%-   endif %}
{%- endfor %}
    return val;
  };

  {{struct.name}}.encode = function(encoder, val) {
    var packed;
    encoder.write32({{struct.name}}.encodedSize);
    encoder.write32({{struct.packed.packed_fields|length}});

{%- for byte in struct.bytes %}
{%-   if byte.packed_fields|length > 1 %}
    packed = 0;
{%-     for packed_field in byte.packed_fields %}
    packed |= (val.{{packed_field.field.name}} & 1) << {{packed_field.bit}}
{%-     endfor %}
    encoder.write8(packed);
{%-   else %}
{%-     for packed_field in byte.packed_fields %}
    encoder.{{packed_field.field.kind|encode_snippet}}val.{{packed_field.field.name}});
{%-     endfor %}
{%-   endif %}
{%-   if byte.is_padding %}
    encoder.skip(1);
{%-   endif %}
{%- endfor %}
  };
