// static
{{struct.name}}Ptr {{struct.name}}::New() {
  {{struct.name}}Ptr rv;
  mojo::internal::StructHelper<{{struct.name}}>::Initialize(&rv);
  return rv;
}

{{struct.name}}::{{struct.name}}()
{%- for field in struct.fields %}
    {% if loop.first %}:{% else %} {% endif %} {{field.name}}({{field|default_value}}){% if not loop.last %},{% endif %}
{%- endfor %} {
}

{{struct.name}}::~{{struct.name}}() {
}

{%  if struct|is_cloneable_kind %}
{{struct.name}}Ptr {{struct.name}}::Clone() const {
  {{struct.name}}Ptr rv(New());
{%-   for field in struct.fields %}
{%-     if field.kind|is_object_kind and not field.kind|is_string_kind %}
  rv->{{field.name}} = {{field.name}}.Clone();
{%-     else %}
  rv->{{field.name}} = {{field.name}};
{%-     endif %}
{%-   endfor %}
  return rv;
}
{%  endif %}

{%- set serializer_type = struct|unmapped_type_for_serializer %}

size_t GetSerializedSize_(const {{struct.name}}Ptr& input,
                          mojo::internal::SerializationContext* context) {

  return mojo::internal::Serializer<
      {{serializer_type}}, const {{struct.name}}Ptr>::PrepareToSerialize(
          input, context);
}

void Serialize_({{struct.name}}Ptr input, mojo::internal::Buffer* buf,
                internal::{{struct.name}}_Data** output,
                mojo::internal::SerializationContext* context) {
  mojo::internal::Serializer<
      {{serializer_type}}, {{struct.name}}Ptr>::Serialize(
          input, buf, output, context);
}

bool Deserialize_(internal::{{struct.name}}_Data* input,
                  {{struct.name}}Ptr* output,
                  mojo::internal::SerializationContext* context) {
  return mojo::internal::Serializer<
      {{serializer_type}}, {{struct.name}}Ptr>::Deserialize(
          input, output, context);
}

{{struct.name}}_Reader::{{struct.name}}_Reader(
    internal::{{struct.name}}_Data*  data,
    mojo::internal::SerializationContext* context)
    : data_(data), context_(context) { }

{%- for pf in struct.packed.packed_fields_in_ordinal_order %}
{%-   set name = pf.field.name -%}
{%-   set kind = pf.field.kind %}
{%-   if kind|is_nullable_kind %}
bool {{struct.name}}_Reader::has_{{name}}() const {
{%-  if kind|is_union_kind %}
  return !data_->{{name}}.is_null();
{%-  elif kind|is_object_kind %}
  return data_->{{name}}.ptr != nullptr;
{%-  elif kind|is_interface_kind %}
  return data_->{{name}}.handle.is_valid();
{%-  elif kind|is_interface_request_kind %}
  return data_->{{name}}.is_valid();
{%-  elif kind|is_associated_interface_kind %}
  return data_->{{name}}.interface_id == mojo::internal::kInvalidInterfaceId;
{%-  elif kind|is_associated_interface_request_kind %}
  return data_->{{name}} == mojo::internal::kInvalidInterfaceId;
{%-  elif kind|is_any_handle_kind %}
  return data_->{{name}}.is_valid();
{%-  else %}
  return !!data_->{{name}};
{%-   endif %}
}
{%-   endif %}
{%-   if kind|is_struct_kind and not kind|is_native_only_kind %}
{{kind|get_name_for_kind}}_Reader {{struct.name}}_Reader::{{name}}() const {
  return {{kind|get_name_for_kind}}_Reader(data_->{{name}}.ptr, context_);
}
{%-   elif kind|is_string_kind %}
base::StringPiece {{struct.name}}_Reader::{{name}}() const {
  DCHECK(data_->{{name}}.ptr);
  return base::StringPiece(data_->{{name}}.ptr->storage(),
                           data_->{{name}}.ptr->size());
}
{%-   endif %}
{%- endfor %}
