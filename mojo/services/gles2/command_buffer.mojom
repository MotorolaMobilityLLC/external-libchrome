// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mojo {

struct CommandBufferState {
  int32 num_entries;
  int32 get_offset;
  int32 put_offset;
  int32 token;
  int32 error;  // TODO(piman): enum
  int32 context_lost_reason;  // TODO(piman): enum
  uint32 generation;
};

// TODO(piman): we need to support proper SHM handles, or refactor command
// buffers to sit on top of mojo primitives (e.g. DataPipe, etc.).
struct ShmHandle {
  uint64 handle_hack;
};

[Peer=CommandBufferClient]
interface CommandBuffer {
  void Initialize(handle<message_pipe> sync_client,
                  ShmHandle shared_state);
  void SetGetBuffer(int32 buffer);
  void Flush(int32 put_offset);
  void MakeProgress(int32 last_get_offset);
  void RegisterTransferBuffer(int32 id, ShmHandle transfer_buffer, uint32 size);
  void DestroyTransferBuffer(int32 id);
  void Echo();

  // TODO(piman): move to somewhere else (native_viewport?).
  void RequestAnimationFrames();
  void CancelAnimationFrames();

  // TODO(piman): sync points
};

[Peer=CommandBuffer]
interface CommandBufferClient {
  void DidDestroy();
  void EchoAck();
  void LostContext(int32 lost_reason);  // TODO(piman): enum

  // TODO(piman): move to somewhere else (native_viewport?).
  void DrawAnimationFrame();
};

interface CommandBufferSyncClient {
  void DidInitialize(bool success);
  void DidMakeProgress(CommandBufferState state);
};

}

